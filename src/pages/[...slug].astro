---
import { CollectionEntry, getCollection } from 'astro:content'
import Base from '../layouts/Base.astro'
import { readFile, stat } from 'fs/promises'
import { join } from 'path'
import { readMeta } from '../lib/meta'

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const readCollection = async (name: string) => {
    const entries = await getCollection(name as any)

    return entries.map((entry) => {
      const slug = `${name}/${entry.slug}`

      console.log(entry.slug)

      return {
        params: { slug },
        props: { entry },
      }
    })
  }

  const paths = await Promise.all(
    ['blog', 'photography', 'docs', 'random'].map(readCollection)
  )

  return paths.flat()
}

// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props
const { Content } = await entry.render()
const meta = await readMeta(join('src/content', `${Astro.params.slug}.json`))

const {
  title,
  subtitle,
  html,
  next: next_page,
  previous: prev_page,
} = { ...meta, ...entry.data } as Record<string, any>
---

<Base>
  <article>
    <h1>{title}</h1>
    <h2>{subtitle}</h2>

    <!-- <div set:html={html} /> -->

    <Content />

    <nav class="link__grid">
      {
        prev_page && (
          <a href={prev_page.route} class="link__link">
            <div class="link__card">
              <h2 class="link__title">Previous</h2>
              <h3 class="link__subtitle">{prev_page.title}</h3>
            </div>
          </a>
        )
      }

      {
        next_page && (
          <a href={next_page.route} class="link__link">
            <div class="link__card">
              <h2 class="link__title">Next</h2>
              <h3 class="link__subtitle">{next_page.title}</h3>
            </div>
          </a>
        )
      }
    </nav>
  </article>
</Base>
