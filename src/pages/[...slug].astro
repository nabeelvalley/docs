---
import { getCollection, type CollectionEntry } from 'astro:content'
import Base from '../layouts/Base.astro'
import { join } from 'path'
import { readMeta } from '../lib/meta'
import { renderJupyterNotebook } from '../lib/markdown'
import ReadingWidth from '../layouts/ReadingWidth.astro'
import Page from '../layouts/Page.astro'
import { getPathParts, type Collection, collections } from '../lib/pages'

interface Props<C extends Collection = Collection> {
  slug: string
  extension: string
  collection: C
  entry: CollectionEntry<C>
}

export interface StaticPaths {
  params: {
    slug: string
  }
  props: Props
}

// 1. Generate a new path for every collection entry
export async function getStaticPaths(): Promise<StaticPaths[]> {
  const readCollection = async (
    collection: Collection
  ): Promise<StaticPaths[]> => {
    const entries = await getCollection(collection)

    return entries.map((entry) => {
      const [slug, extension] = getPathParts(entry, collection)
      return {
        params: { slug },
        props: { collection, slug, extension, entry },
      }
    })
  }

  const staticPaths = await Promise.all(collections.map(readCollection))

  return staticPaths.flat()
}

const renderIpynb = async (props: Props) => {
  const html = await renderJupyterNotebook(
    `./src/content/${props.collection}/${props.entry.id}`
  )

  return { Content: html }
}

const renderers = {
  'blog-md': (entry: Props<'blog-md'>) => entry.entry.render(),
  'blog-ipynb': (entry: Props<'blog-ipynb'>) => renderIpynb(entry),
  'docs-md': (entry: Props<'docs-md'>) => entry.entry.render(),
  'docs-ipynb': (entry: Props<'docs-ipynb'>) => renderIpynb(entry),
  photography: (entry: Props<'photography'>) => entry.entry.render(),
  random: (entry: Props<'random'>) => entry.entry.render(),
}

const { props } = Astro
const { Content, remarkPluginFrontmatter = {} } = await renderers[
  props.entry.collection
](props)

const { title, subtitle, description } = props.entry.data
const { lastModified } = remarkPluginFrontmatter
---

<Base title={title} description={description}>
  <Page>
    <article class="rendered">
      <h1>{title}</h1>
      {subtitle ? <p class="subtitle">Created: {subtitle}</p> : null}
      {lastModified ? <p class="subtitle">Updated: {lastModified}</p> : null}

      {typeof Content === 'string' ? <div set:html={Content} /> : <Content />}
    </article>
  </Page>
</Base>
