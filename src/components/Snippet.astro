---
import { readFile } from 'fs/promises'

import { Code } from 'astro-expressive-code/components'
import type { MarkerDefinition } from 'astro-expressive-code'

type Range = `${number}-${number}` | `${number}`

export interface Props {
  mark?: Range | Range[]
  ins?: Range | Range[]
  del?: Range | Range[]
  /**
   * Base path from which to resolve snippet
   *
   */
  base?: string
  /**
   * Path from the `base` directory, e.g. `algorithms/union-find/quick-find.ts`
   */
  path: string
  /**
   * Languages supported by the Astro Code component. Add languages here as needed since Astro does
   * not expose this type
   */
  lang?: 'ts' | 'js' | 'astro' | 'c++' | 'yml' | 'ini' | 'css' | 'glsl' | 'html'
}

const {
  base = './src/snippets',
  path,
  lang = 'ts',
  mark,
  ins,
  del,
} = Astro.props

const marker = (range?: Range | Range[]): MarkerDefinition[] => {
  if (!range) {
    return []
  }

  if (typeof range === 'string') {
    return [
      {
        range,
      },
    ]
  }

  return range.map((r) => ({ range: r }))
}

const code = await readFile(`${base}/${path}`, 'utf-8')
---

<div class="snippet">
  <Code
    title={path}
    code={code}
    lang={lang}
    mark={marker(mark)}
    ins={marker(ins)}
    del={marker(del)}
  />
</div>

<style is:global>
  /* Expressive Code Overrides */

  .page .expressive-code .frame.has-title:not(.is-terminal) .header .title {
    width: 100%;
    background-color: var(--color-brand);
    color: var(--color-on-brand);
  }

  .page .expressive-code .copy {
    transform: scale(0.6);
  }

  .page .expressive-code .copy button::before {
    border: none;
  }
</style>
