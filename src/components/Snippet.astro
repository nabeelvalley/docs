---
import { readFile } from "fs/promises";

import { Code } from "astro-expressive-code/components";
import type {
  MarkerDefinition,
  MarkerLineOrRange,
} from "astro-expressive-code";

type Range = `${number}-${number}` | `${number}` | string;

type Mark = Range | Range[] | MarkerLineOrRange | MarkerLineOrRange[] | RegExp;

export interface Props {
  mark?: Mark;
  ins?: Mark;
  del?: Mark;
  collapse?: Range | Range[];
  /**
   * Base path from which to resolve snippet
   *
   */
  base?: string;
  /**
   * Path from the `base` directory, e.g. `algorithms/union-find/quick-find.ts`
   */
  path: string;
  /**
   * Languages supported by the Astro Code component. Add languages here as needed since Astro does
   * not expose this type
   */
  lang?:
    | "ts"
    | "js"
    | "astro"
    | "c++"
    | "yml"
    | "ini"
    | "css"
    | "glsl"
    | "html";
}

const {
  base = "./src/snippets",
  path,
  lang = "ts",
  mark,
  ins,
  del,
  collapse,
} = Astro.props;

const isMarkerArray = (mark: Mark): mark is Range[] | MarkerLineOrRange[] =>
  mark instanceof Array;

const isRange = (mark: string): mark is Range => {
  const rx = /^(\d+)|(\d+\-\d+)$/g;
  return rx.test(mark);
};

const markSingle = (mark: Range | MarkerDefinition): MarkerDefinition => {
  if (typeof mark === "string") {
    const rng = isRange(mark);
    if (rng) {
      return { range: mark };
    } else {
      return mark;
    }
  }

  return mark;
};

const marker = (range?: Mark): MarkerDefinition[] => {
  if (!range) {
    return [];
  }

  const isArr = isMarkerArray(range);

  if (isArr) {
    return range.map(markSingle);
  }

  return [markSingle(range)];
};

const code = await readFile(`${base}/${path}`, "utf-8");
---

<div class="snippet">
  <Code
    title={path}
    code={code}
    lang={lang}
    mark={marker(mark)}
    ins={marker(ins)}
    del={marker(del)}
    collapse={collapse}
  />
</div>

<style is:global>
  /* Expressive Code Overrides */

  .page .expressive-code .frame.has-title:not(.is-terminal) .header .title {
    width: 100%;
    background-color: var(--color-brand);
    color: var(--color-on-brand);
  }

  .page .expressive-code .copy {
    transform: scale(0.6);
  }

  .page .expressive-code .copy button::before {
    border: none;
  }

  .snippet {
    margin-bottom: 1rem;
  }
</style>
