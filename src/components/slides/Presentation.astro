<button id="presentation-button" class="presentation-hidden" type="button"
  >Start Presentation</button
>

<div
  id="presentation-container"
  class="presentation-hidden presentation-overflow-hidden"
>
  <main id="presentation-content">
    <h1>No slides found on page</h1>
  </main>
</div>

<script>
  const button = document.getElementById(
    'presentation-button'
  ) as HTMLButtonElement
  const container = document.getElementById(
    'presentation-container'
  ) as HTMLDivElement
  const content = document.getElementById(
    'presentation-content'
  ) as HTMLDivElement

  let slides = Array.from(document.querySelectorAll('.presentation-slide')).map(
    (el) => el.outerHTML
  )

  let slide = 0

  const nextSlide = () => {
    if (slide === slides.length - 1) {
      return slide
    }

    return slide + 1
  }

  const prevSlide = () => {
    if (slide === 0) {
      return slide
    }

    return slide - 1
  }

  const nextClass = 'presentation-next'
  const prevClass = 'presentation-prev'

  const transitionClasses = [nextClass, prevClass]

  const keyHandlers: Record<string, [string, () => number]> = {
    ArrowRight: [nextClass, nextSlide],
    ArrowLeft: [prevClass, prevSlide],
  }

  const startPresentation = () => {
    container.classList.remove('presentation-hidden')
    button.innerHTML = 'Resume presentation'
    document.body.classList.add('presentation-overflow-hidden')
    if (slides.length) {
      content.innerHTML = slides[slide]
    }
  }

  const endPresentation = () => {
    container.classList.add('presentation-hidden')
    document.body.classList.remove('presentation-overflow-hidden')
  }

  // If there is no presentation on the page then we don't initialize
  if (slides.length) {
    button.classList.remove('presentation-hidden')
    button.addEventListener('click', startPresentation)

    window.addEventListener('keyup', (ev) => {
      const isEscape = ev.key === 'Escape'
      if (isEscape) {
        endPresentation()
        return
      }

      const isStart = ev.key === 'p'
      if (isStart) {
        startPresentation()
        return
      }

      const handler = keyHandlers[ev.key]

      if (!handler) {
        return
      }

      const [transitionClass, getSlide] = handler

      content.classList.remove(...transitionClasses)
      content.classList.add(transitionClass)

      const nextSlide = getSlide()
      if (slide === nextSlide) {
        return
      }

      // In order to use the more complex transitions you will require
      // the view transitions flag to be on until supported
      // chrome://flags/#view-transition-on-navigation
      document.startViewTransition(() => {
        slide = nextSlide
        content.innerHTML = slides[slide]
      })
    })
  }
</script>

<style is:global>
  #presentation-button {
    text-decoration: dotted underline var(--color-brand);
    color: var(--color-on-base);
    transition: all 300ms;
  }

  #presentation-button:hover,
  #presentation-button:focus {
    color: var(--color-brand);
  }

  .presentation-overflow-hidden {
    overflow: hidden;
  }

  .presentation-hidden {
    display: none;
  }

  .presentation-slide-only {
    display: none;
  }

  #presentation-container {
    z-index: 10;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    overflow: auto;

    backdrop-filter: blur(50px);
    background-color: #0000007d;

    & .presentation-slide-only {
      display: block;
    }
  }

  #presentation-content {
    display: flex;
    flex-direction: column;

    background-color: var(--color-base);
    color: var(--color-on-base);

    box-sizing: border-box;
    min-height: 100vh;
    width: 100%;
    padding: 2rem 4rem;

    & .centered {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    & pre.astro-code {
      filter: none;
    }
  }

  .presentation-next {
    view-transition-name: next;
  }

  .presentation-prev {
    view-transition-name: prev;
  }

  ::view-transition-old(next) {
    animation: slide-out-left 0.5s linear;
  }
  ::view-transition-new(next) {
    animation: slide-out-right 0.5s linear reverse;
  }

  ::view-transition-old(prev) {
    animation: slide-out-right 0.5s linear;
  }
  ::view-transition-new(prev) {
    animation: slide-out-left 0.5s linear reverse;
  }

  @keyframes slide-out-right {
    0% {
      transform: translateX(0) scale(1);
    }
    15% {
      transform: translateX(0) scale(0.8) translateY(0%);
    }
    85% {
      transform: translateX(100%) scale(0.8) translateY(0%);
    }
    100% {
      transform: translateX(100%) scale(1);
    }
  }

  @keyframes slide-out-left {
    0% {
      transform: translateX(0) scale(1);
    }
    15% {
      transform: translateX(0) scale(0.8) translateY(0%);
    }
    85% {
      transform: translateX(-100%) scale(0.8) translateY(0%);
    }
    100% {
      transform: translateX(-100%) scale(1);
    }
  }
</style>
