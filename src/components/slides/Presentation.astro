<button id="presentation-button" class="presentation-hidden" type="button"
  >Start Presentation</button
>

<div
  id="presentation-container"
  class="presentation-hidden presentation-overflow-hidden"
>
  <main id="presentation-content">
    <h1>No slides found on page</h1>
  </main>
</div>

<script>
  const button = document.getElementById(
    "presentation-button"
  ) as HTMLButtonElement;
  const container = document.getElementById(
    "presentation-container"
  ) as HTMLDivElement;
  const content = document.getElementById(
    "presentation-content"
  ) as HTMLDivElement;

  let slides: string[] = [];
  let slide = 0;

  const nextSlide = () => {
    if (slide === slides.length - 1) {
      return slide;
    }

    return slide + 1;
  };

  const prevSlide = () => {
    if (slide === 0) {
      return slide;
    }

    return slide - 1;
  };

  const nextClass = "presentation-next";
  const prevClass = "presentation-prev";

  const transitionClasses = [nextClass, prevClass];

  const keyHandlers: Record<string, [string, () => number]> = {
    ArrowRight: [nextClass, nextSlide],
    ArrowDown: [nextClass, nextSlide],

    ArrowLeft: [prevClass, prevSlide],
    ArrowUp: [prevClass, prevSlide],
  };

  const startPresentation = () => {
    slides = Array.from(document.querySelectorAll(".presentation-slide")).map(
      (el) => el.innerHTML
    );

    container.classList.remove("presentation-hidden");
    button.innerHTML = "Resume presentation";
    document.body.classList.add("presentation-overflow-hidden");

    if (slides.length) {
      content.innerHTML = slides[slide];
    }
  };

  const endPresentation = () => {
    container.classList.add("presentation-hidden");
    document.body.classList.remove("presentation-overflow-hidden");
  };

  // If there is no presentation on the page then we don't initialize
  if (container) {
    button.classList.remove("presentation-hidden");
    button.addEventListener("click", startPresentation);

    window.addEventListener("keyup", (ev) => {
      const isEscape = ev.key === "Escape";
      if (isEscape) {
        endPresentation();
        return;
      }

      const handler = keyHandlers[ev.key];

      if (!handler) {
        return;
      }

      const [transitionClass, getSlide] = handler;

      content.classList.remove(...transitionClasses);
      content.classList.add(transitionClass);

      const nextSlide = getSlide();
      if (slide === nextSlide) {
        return;
      }

      // In order to use the more complex transitions you will require
      // the view transitions flag to be on until supported
      // chrome://flags/#view-transition-on-navigation
      document.startViewTransition(() => {
        slide = nextSlide;
        content.innerHTML = slides[slide];
      });
    });
  }
</script>

<style is:global>
  .presentation-overflow-hidden {
    overflow: hidden;
  }

  .presentation-hidden {
    display: none;
  }

  .presentation-slide-only {
    display: none;
  }

  #presentation-container {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;

    backdrop-filter: blur(20px);
    background-color: rgba(0, 0, 0, 0.566);
    color: rgb(255, 255, 255);

    & .presentation-slide-only {
      display: block;
    }
  }

  #presentation-content {
    background-color: black;
    box-sizing: border-box;
    padding: 4rem;
    height: 100%;
    width: 100%;
  }

  .presentation-next {
    view-transition-name: next;
  }

  .presentation-prev {
    view-transition-name: prev;
  }

  ::view-transition-old(next) {
    animation: slide-out-next 1s ease-in-out;
  }
  ::view-transition-new(next) {
    animation: slide-in-next 1s ease-in-out;
  }

  ::view-transition-old(prev) {
    animation: slide-out-prev 1s ease-in-out;
  }
  ::view-transition-new(prev) {
    animation: slide-in-prev 1s ease-in-out;
  }

  @keyframes slide-out-prev {
    0% {
      transform: translateX(0) scale(1);
    }
    15% {
      transform: translateX(0) scale(0.8) translateY(0%);
    }
    85% {
      transform: translateX(100%) scale(0.8) translateY(0%);
    }
    100% {
      transform: translateX(100%) scale(1);
    }
  }

  @keyframes slide-in-prev {
    0% {
      transform: translateX(-100%) scale(0.8);
    }
    15% {
      transform: translateX(-100%) scale(0.8) translateY(0%);
    }
    85% {
      transform: translateX(0) scale(0.8) translateY(0%);
    }
    100% {
      transform: translateX(0) scale(1);
    }
  }

  @keyframes slide-out-next {
    0% {
      transform: translateX(0) scale(1);
    }
    15% {
      transform: translateX(0) scale(0.8) translateY(0%);
    }
    85% {
      transform: translateX(-100%) scale(0.8) translateY(0%);
    }
    100% {
      transform: translateX(-100%) scale(1);
    }
  }

  @keyframes slide-in-next {
    0% {
      transform: translateX(100%) scale(1);
    }
    15% {
      transform: translateX(100%) scale(0.8) translateY(0%);
    }
    85% {
      transform: translateX(0) scale(0.8) translateY(0%);
    }
    100% {
      transform: translateX(0) scale(1);
    }
  }
</style>
