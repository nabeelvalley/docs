<button id="presentation-button" class="presentation-hidden" type="button"
  >Start Presentation</button
>

<script>
  import { createSyncReader, createSyncWriter } from '../sync'

  const button = document.getElementById(
    'presentation-button'
  ) as HTMLButtonElement

  let slides = Array.from(document.querySelectorAll('.presentation-slide'))

  let slide = 0
  let presenter = false

  const presentationId = window.location.href
  const syncWriter = createSyncWriter<number>(presentationId)

  const nextSlide = () => {
    if (slide === slides.length - 1) {
      return slide
    }

    return slide + 1
  }

  const prevSlide = () => {
    if (slide === 0) {
      return slide
    }

    return slide - 1
  }

  const nextClass = 'presentation-next'
  const currClass = 'presentation-current'
  const prevClass = 'presentation-prev'

  const transitionClasses = [nextClass, currClass, prevClass]

  const keyHandlers: Record<string, () => number> = {
    ArrowRight: nextSlide,
    ArrowLeft: prevSlide,
  }

  const displaySlides = () => {
    for (let i = 0; i < slides.length; i++) {
      slides[i].classList.remove('active', 'inactive', ...transitionClasses)

      if (i === slide) {
        slides[i].classList.add('active', currClass)
      } else {
        slides[i].classList.add('inactive')

        if (i > slide) {
          slides[i].classList.add(nextClass)
        } else {
          slides[i].classList.add(prevClass)
        }
      }
    }
  }

  const startPresentation = () => {
    // container.classList.remove('presentation-hidden')
    button.innerHTML = 'Resume presentation'
    document.body.classList.add('presentation-overflow-hidden')

    displaySlides()
  }

  const endPresentation = () => {
    // container.classList.add('presentation-hidden')
    document.body.classList.remove('presentation-overflow-hidden')
  }

  const setPresenter = () => {
    presenter = true
    syncWriter(slide)
    // container.classList.add('presentation-presenter')
  }

  const transition = (nextSlide: number) => {
    if (slide === nextSlide) {
      return
    }

    slides.forEach((s) => s.classList.remove(...transitionClasses))

    if (presenter) {
      syncWriter(nextSlide)
    }

    slide = nextSlide

    displaySlides()
  }

  // If there is no presentation on the page then we don't initialize
  if (slides.length) {
    button.classList.remove('presentation-hidden')
    button.addEventListener('click', startPresentation)
    createSyncReader<number>(presentationId, slide, transition)

    window.addEventListener('keyup', (ev) => {
      ev.preventDefault()
      const isEscape = ev.key === 'Escape'
      if (isEscape) {
        endPresentation()
        return
      }

      const isSpace = ev.key === ' '
      if (isSpace) {
        setPresenter()
        return
      }

      const getSlide = keyHandlers[ev.key]

      if (!getSlide) {
        return
      }

      const nextSlide = getSlide()
      transition(nextSlide)
    })

    let touchstartX = 0
    let touchendX = 0
    const handleGesure = () => {
      const magnitude = Math.abs(touchstartX - touchendX)

      if (magnitude < 40) {
        // Ignore since this could be a scroll up/down
        return
      }

      if (touchendX < touchstartX) {
        transition(nextSlide())
      }
      if (touchendX > touchstartX) {
        transition(prevSlide())
      }
    }

    document.addEventListener(
      'touchstart',
      (ev) => {
        touchstartX = ev.changedTouches[0].screenX
      },
      false
    )

    document.addEventListener(
      'touchend',
      (event) => {
        touchendX = event.changedTouches[0].screenX
        handleGesure()
      },
      false
    )
  }
</script>

<style is:global>
  .presentation-overflow-hidden {
    overflow: hidden;
    visibility: hidden;

    .presentation-hidden {
      display: none;
    }

    .presentation-slide {
      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;

      visibility: visible;

      transition: transform 500ms ease-in-out;

      display: flex;
      flex-direction: column;

      background-color: var(--color-base);
      color: var(--color-on-base);

      box-sizing: border-box;
      min-height: 100vh;
      width: 100%;
      padding: 2rem 4rem;

      z-index: 10;
      overflow: auto;

      &.centered {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }

      .presentation-slide-only {
        display: block;
      }

      .astro-code {
        filter: none;
      }
    }

    .presentation-slide-only {
      display: none;
    }

    .presentation-presenter #presentation-content {
      border: solid 8px var(--color-brand);
    }
  }

  .presentation-next {
    transform: translateX(100%);
  }

  .presentation-current {
    transform: translateX(0%);
  }

  .presentation-prev {
    transform: translateX(-100%);
  }
</style>
