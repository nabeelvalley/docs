<button id="presentation-button" class="presentation-hidden" type="button"
  >Start Presentation</button
>

<div
  id="presentation-container"
  class="presentation-hidden presentation-overflow-hidden"
>
  <main id="presentation-content">
    <h1>No slides found on page</h1>
  </main>
</div>

<script>
  import { createSyncReader, createSyncWriter } from '../sync'

  const button = document.getElementById(
    'presentation-button'
  ) as HTMLButtonElement
  const container = document.getElementById(
    'presentation-container'
  ) as HTMLDivElement
  const content = document.getElementById(
    'presentation-content'
  ) as HTMLDivElement

  let slides = Array.from(document.querySelectorAll('.presentation-slide'))

  let slide = 0
  let presenter = false

  const presentationId = window.location.href
  const syncWriter = createSyncWriter<number>(presentationId)

  const nextSlide = () => {
    if (slide === slides.length - 1) {
      return slide
    }

    return slide + 1
  }

  const prevSlide = () => {
    if (slide === 0) {
      return slide
    }

    return slide - 1
  }

  const nextClass = 'presentation-next'
  const prevClass = 'presentation-prev'

  const transitionClasses = [nextClass, prevClass]

  const keyHandlers: Record<string, () => number> = {
    ArrowRight: nextSlide,
    ArrowLeft: prevSlide,
  }

  const startPresentation = () => {
    container.classList.remove('presentation-hidden')
    button.innerHTML = 'Resume presentation'
    document.body.classList.add('presentation-overflow-hidden')
    if (slides.length) {
      content.innerHTML = slides[slide].outerHTML
    }
  }

  const endPresentation = () => {
    container.classList.add('presentation-hidden')
    document.body.classList.remove('presentation-overflow-hidden')
  }

  const setPresenter = () => {
    presenter = true
    syncWriter(slide)
    container.classList.add('presentation-presenter')
  }

  const transition = (nextSlide: number) => {
    if (slide === nextSlide) {
      return
    }

    content.classList.remove(...transitionClasses)
    if (slide < nextSlide) {
      content.classList.add(nextClass)
    } else {
      content.classList.add(prevClass)
    }

    if (presenter) {
      syncWriter(nextSlide)
    }

    slide = nextSlide
    const slideContent = slides[slide]

    document.startViewTransition(() => {
      content.innerHTML = slideContent.outerHTML
    })
  }

  // If there is no presentation on the page then we don't initialize
  if (slides.length) {
    button.classList.remove('presentation-hidden')
    button.addEventListener('click', startPresentation)
    createSyncReader<number>(presentationId, slide, transition)

    window.addEventListener('keyup', (ev) => {
      const isEscape = ev.key === 'Escape'
      if (isEscape) {
        endPresentation()
        return
      }

      const isSpace = ev.key === ' '
      if (isSpace) {
        setPresenter()
        return
      }

      const getSlide = keyHandlers[ev.key]

      if (!getSlide) {
        return
      }

      const nextSlide = getSlide()
      transition(nextSlide)
    })

    let touchstartX = 0
    let touchendX = 0
    const handleGesure = () => {
      if (touchendX < touchstartX) {
        transition(nextSlide())
      }
      if (touchendX > touchstartX) {
        transition(prevSlide())
      }
    }

    container.addEventListener(
      'touchstart',
      (ev) => {
        touchstartX = ev.changedTouches[0].screenX
      },
      false
    )

    container.addEventListener(
      'touchend',
      (event) => {
        touchendX = event.changedTouches[0].screenX
        handleGesure()
      },
      false
    )
  }
</script>

<style is:global>
  .presentation-overflow-hidden {
    overflow: hidden;
  }

  .presentation-hidden {
    display: none;
  }

  .presentation-slide-only {
    display: none;
  }

  #presentation-container {
    z-index: 10;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    overflow: auto;

    background-color: black;

    & .presentation-slide-only {
      display: block;
    }
  }

  #presentation-content {
    display: flex;
    flex-direction: column;

    background-color: var(--color-base);
    color: var(--color-on-base);

    box-sizing: border-box;
    min-height: 100vh;
    width: 100%;
    padding: 2rem 4rem;

    & .centered {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    & pre.astro-code {
      filter: none;
    }
  }

  .presentation-presenter #presentation-content {
    border: solid 8px var(--color-brand);
  }

  .presentation-next {
    view-transition-name: next;
  }

  .presentation-prev {
    view-transition-name: prev;
  }

  ::view-transition-old(next) {
    animation: slide-out-left 0.66s ease-in-out;
  }
  ::view-transition-new(next) {
    animation: slide-out-right 0.66s ease-in-out reverse;
  }

  ::view-transition-old(prev) {
    animation: slide-out-right 0.66s ease-in-out;
  }
  ::view-transition-new(prev) {
    animation: slide-out-left 0.66s ease-in-out reverse;
  }

  @keyframes slide-out-right {
    0% {
      transform: translateX(0) scale(1);
    }
    20% {
      transform: translateX(0) scale(0.8) translateY(0%);
    }
    30% {
      transform: translateX(0) scale(0.8) translateY(0%);
    }
    70% {
      transform: translateX(100%) scale(0.8) translateY(0%);
    }
    80% {
      transform: translateX(100%) scale(0.8) translateY(0%);
    }
    100% {
      transform: translateX(100%) scale(1);
    }
  }

  @keyframes slide-out-left {
    0% {
      transform: translateX(0) scale(1);
    }
    20% {
      transform: translateX(0) scale(0.8) translateY(0%);
    }
    30% {
      transform: translateX(0) scale(0.8) translateY(0%);
    }
    70% {
      transform: translateX(-100%) scale(0.8) translateY(0%);
    }
    80% {
      transform: translateX(-100%) scale(0.8) translateY(0%);
    }
    100% {
      transform: translateX(-100%) scale(1);
    }
  }
</style>
