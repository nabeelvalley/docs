---
/**
 * Note that the reason for the indirection in implementing the solution here is due the need for
 * SSR as well as client-component hydration which is a bit hacky.
 *
 * The alternative is to generate the content up-front which adds a new problem of dynamically
 * having to fetch the data from the client side
 */

import WebContainerPlayground from './WebContainerPlayground'

import { readFileSync, statSync, readdirSync } from 'fs'
import type { FileSystemTree } from '@webcontainer/api'
import { join, resolve } from 'path'

const getFiles = (dir): FileSystemTree => {
  const subdirs = readdirSync(dir)
  return subdirs.reduce<FileSystemTree>((curr, subdir) => {
    const res = resolve(dir, subdir)

    const isDir = statSync(res).isDirectory()

    if (!isDir) {
      return {
        ...curr,
        [subdir]: {
          file: {
            contents: readFileSync(res, 'utf-8').toString(),
          },
        },
      }
    }

    const files = getFiles(res)
    return {
      ...curr,
      [subdir]: {
        directory: Object.assign({}, files),
      },
    }
  }, {})
}

const importPlayground = (path: string): FileSystemTree => {
  const files = getFiles('src/playgrounds/' + path)
  return files
}

const files = importPlayground(Astro.props.name)
---

<script id="webcontainer-data-script" data-files={JSON.stringify(files)}>
  const json = document.getElementById('webcontainer-data-script').dataset.files
  // read dynamically and passed into the WebContainerPlayground for hydration
  window['webcontainerFiles'] = JSON.parse(json)
</script>

<WebContainerPlayground
  windowFileKey="webcontainerFiles"
  initialCommand={Astro.props.initialCommand}
  startCommand={Astro.props.startCommand}
  client:only="react"
/>
