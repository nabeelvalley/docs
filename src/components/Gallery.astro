---
import { Image } from 'astro:assets'
const { path } = Astro.props

type Path = 'index' | 'nature' | 'places' | 'portraits/bw'

interface Props {
  path: Path
}

type ImageData = {
  src: string
  width: number
  height: number
  format: 'jpg'
  orientation: 1
}

const allImages = (await import.meta.glob(`../photography/**/*.*`)) as Record<
  string,
  () => Promise<{ default: ImageData }>
>

const getAlt = (path: string): string => {
  const parts = path.split('/')
  const file = parts[parts.length - 1]
  const name = file.split('.')[0]

  return name
}

const images = await Promise.all(
  Array.from(Object.entries(allImages))
    .filter(([key]) => key.startsWith(`../photography/${path}`))
    .map(async ([key, getData]) => ({
      alt: getAlt(key),
      ...(await getData()),
    }))
)
---

<div class="gallery__grid">
  {
    images
      .reverse()
      .map((image) => (
        <Image
          src={image.default}
          alt={image.alt}
          class={
            image.default.height > image.default.width
              ? 'gallery__image gallery__image--vertical'
              : 'gallery__image gallery__image--horizontal'
          }
        />
      ))
  }
</div>

<style>
  /* Gallery */
  .gallery__grid {
    --grid-cols: 6;
    margin-top: 48px;
    display: grid;
    grid-template-columns: repeat(var(--grid-cols), 1fr);
    grid-template-rows: auto;
    grid-gap: 24px;
  }

  @media (min-width: 900px) {
    .gallery__grid {
      --grid-cols: 12;
    }
  }

  @media (min-width: 1200px) {
    .gallery__grid {
      --grid-cols: 24;
    }
  }

  .gallery__image {
    position: relative;
    height: unset;
    width: unset;
  }

  .gallery__image--horizontal {
    grid-column: span 6;
    grid-row: span 4;
  }

  .gallery__image--vertical {
    grid-column: span 6;
    grid-row: span 8;
  }
</style>
